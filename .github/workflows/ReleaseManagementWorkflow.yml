name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

env:
  JAVA_VERSION: '24'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            TAG=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }}
            TAG=v${{ github.event.inputs.version }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
          echo "Release tag: $TAG"

      - name: Validate version format
        run: |
          if [[ ! "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Expected: x.y.z (e.g., 1.0.0)"
            exit 1
          fi

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven

      - name: Update version in pom.xml
        run: |
          ./mvnw versions:set -DnewVersion=${{ needs.validate.outputs.version }} -DgenerateBackupPoms=false

      - name: Run tests with coverage
        run: ./mvnw -q -e verify

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            target/surefire-reports/
            target/site/jacoco/

      - name: Build application
        run: ./mvnw -q -e package -DskipTests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            target/*.jar
            target/*.jar.original

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build-and-test]
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: target/

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          # Generate release notes
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## What's Changed" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "" >> release_notes.md
            echo "First release of George's Bookcase Java Backend" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "## Artifacts" >> release_notes.md
          echo "- **bookcase-java-${{ needs.validate.outputs.version }}.jar** - Main application JAR" >> release_notes.md
          echo "- **bookcase-java-${{ needs.validate.outputs.version }}.jar.original** - Original JAR without Spring Boot loader" >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: Release ${{ needs.validate.outputs.version }}
          body_path: release_notes.md
          files: |
            target/bookcase-java-${{ needs.validate.outputs.version }}.jar
            target/bookcase-java-${{ needs.validate.outputs.version }}.jar.original
          draft: false
          prerelease: false

      - name: Update version to next SNAPSHOT
        run: |
          # Calculate next snapshot version
          VERSION=${{ needs.validate.outputs.version }}
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Increment patch version for next snapshot
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}-SNAPSHOT"
          
          ./mvnw versions:set -DnewVersion=$NEXT_VERSION -DgenerateBackupPoms=false
          
          # Commit the version update
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pom.xml
          git commit -m "chore: bump version to $NEXT_VERSION after release" || exit 0
          git push origin main

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: always()
    
    steps:
      - name: Release Success
        if: needs.create-release.result == 'success'
        run: |
          echo "✅ Release ${{ needs.validate.outputs.version }} created successfully!"
          echo "📦 Artifacts uploaded to GitHub Release"
          
      - name: Release Failed
        if: needs.create-release.result != 'success'
        run: |
          echo "❌ Release ${{ needs.validate.outputs.version }} failed!"
          exit 1
